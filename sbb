local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local bin = LocalPlayer.PlayerGui.Merchant.Main.ShopWindow.Content.Bin
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

-- Таблица соответствий координат и значений
local coordinatesMapping = {
    [Vector2.new(417.467896, 55.389389)] = 2,
    [Vector2.new(226.067902, 230.289368)] = 3,
    -- добавьте сюда свои соответствия
}

-- Функция для сравнения двух векторов с учетом допустимой погрешности
local function vectorsAreEqual(vec1, vec2, tolerance)
    return math.abs(vec1.X - vec2.X) <= tolerance and math.abs(vec1.Y - vec2.Y) <= tolerance
end

-- Допустимая погрешность для сравнения координат
local tolerance = 0.1

-- Функция для проверки и сравнения координат
local function checkAndMapBinContent(bin, coordinatesMapping, tolerance)
    local hasItems = false

    for _, item in ipairs(bin:GetChildren()) do
        if item:IsA("GuiObject") then
            hasItems = true
            local absolutePosition = item.AbsolutePosition
            print(item)
            -- Проверка позиции объекта в таблице соответствий
            for coord, value in pairs(coordinatesMapping) do
                if vectorsAreEqual(absolutePosition, coord, tolerance) then
                    print("Match found for item: " .. item.Name .. " | Value: " .. value)
              
                    if value then
                        if item.Name ~= "TraitRolls" and value == 2 then
                            local args = { 2 }
                            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.7.0"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("MerchantService"):WaitForChild("RF"):WaitForChild("Purchase"):InvokeServer(unpack(args))
                            print("buy 2 lot")
                        end
                        if item.Name ~= "TraitRolls" and value == 3 then
                            local args = { 3 }
                            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.7.0"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("MerchantService"):WaitForChild("RF"):WaitForChild("Purchase"):InvokeServer(unpack(args))
                            print("buy 3 lot")
                        end
                    end
                end
            end
        end
    end

    if not hasItems then
        print("Bin is empty")
    end
end

-- Функция для получения координат игрока
local function getPlayerCoordinates()
    local rootPart = Character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        return rootPart.Position
    end
    return nil
end

-- Функция для округления до тысячных
local function roundToThousandths(value)
    return math.floor(value * 100 + 0.5) / 100
end

-- Функция для перемещения игрока на заданные координаты
local function movePlayerToCoordinates(x, y, z)
    local rootPart = Character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        rootPart.CFrame = CFrame.new(x, y, z)
    else
        print("Could not find HumanoidRootPart.")
    end
end

-- Заданные координаты
local targetX = 260.228
local targetY = 9.722
local targetZ = -456.180

-- Округленные координаты
local roundedTargetX = roundToThousandths(targetX)
local roundedTargetY = roundToThousandths(targetY)
local roundedTargetZ = roundToThousandths(targetZ)


while true do
  -- Проверка и перемещение игрока, если координаты не совпадают
  local currentCoordinates = getPlayerCoordinates()
  if currentCoordinates then
      local roundedCurrentX = roundToThousandths(currentCoordinates.X)
      local roundedCurrentY = roundToThousandths(currentCoordinates.Y)
      local roundedCurrentZ = roundToThousandths(currentCoordinates.Z)

      if roundedCurrentX ~= roundedTargetX or roundedCurrentY ~= roundedTargetY or roundedCurrentZ ~= roundedTargetZ then
          movePlayerToCoordinates(targetX, targetY, targetZ)
      else
      end
  else
  end
  wait(5)
  checkAndMapBinContent(bin, coordinatesMapping, tolerance)
  wait(5)
end
